#include <windows.h>
#include <string>
#include <cmath>
#include <stack>
#include <cctype>

using namespace std;

HWND hDisplay;
string expression = "";

// Utility to update the display
void UpdateDisplay() {
    SetWindowText(hDisplay, expression.c_str());
}

// Simple evaluator for + - * / expressions
double EvaluateSimple(const string& expr) {
    stack<double> nums;
    stack<char> ops;
    int i = 0;

    auto apply_op = [](double a, double b, char op) -> double {
        switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return b != 0 ? a / b : NAN;
        default: return 0;
        }
    };

    while (i < expr.length()) {
        if (isspace(expr[i])) { i++; continue; }

        if (isdigit(expr[i]) || expr[i] == '.') {
            string num;
            while (i < expr.length() && (isdigit(expr[i]) || expr[i] == '.'))
                num += expr[i++];
            nums.push(stod(num));
        } else {
            while (!ops.empty() && (
                (ops.top() == '*' || ops.top() == '/') ||
                ((ops.top() == '+' || ops.top() == '-') && (expr[i] == '+' || expr[i] == '-'))
            )) {
                double b = nums.top(); nums.pop();
                double a = nums.top(); nums.pop();
                char op = ops.top(); ops.pop();
                nums.push(apply_op(a, b, op));
            }
            ops.push(expr[i]);
            i++;
        }
    }

    while (!ops.empty()) {
        double b = nums.top(); nums.pop();
        double a = nums.top(); nums.pop();
        char op = ops.top(); ops.pop();
        nums.push(apply_op(a, b, op));
    }

    return nums.top();
}

// Main Evaluate: scientific + simple
double Evaluate(const string& expr) {
    try {
        if (expr.rfind("sin", 0) == 0) return sin(stod(expr.substr(3)) * M_PI / 180);
        if (expr.rfind("cos", 0) == 0) return cos(stod(expr.substr(3)) * M_PI / 180);
        if (expr.rfind("tan", 0) == 0) return tan(stod(expr.substr(3)) * M_PI / 180);
        if (expr.rfind("log", 0) == 0) return log10(stod(expr.substr(3)));
        if (expr.rfind("sqrt", 0) == 0) return sqrt(stod(expr.substr(4)));
        return EvaluateSimple(expr);
    } catch (...) {
        return NAN;
    }
}

// When "=" is clicked
void CalculateResult() {
    try {
        string expr = expression;
        for (char& ch : expr)
            if (ch == '×') ch = '*';
            else if (ch == '÷') ch = '/';

        double result = Evaluate(expr);
        if (isnan(result) || isinf(result))
            expression = "Error";
        else {
            expression = to_string(result);
            // Remove trailing zeros and dot
            expression.erase(expression.find_last_not_of('0') + 1, string::npos);
            if (!expression.empty() && expression.back() == '.')
                expression.pop_back();
        }
    } catch (...) {
        expression = "Error";
    }
    UpdateDisplay();
}

// Handle button clicks
void OnButtonClick(const string& value) {
    if (value == "=") {
        CalculateResult();
    } else if (value == "C") {
        expression = "";
        UpdateDisplay();
    } else if (value == "π") {
        expression += "3.14159";
        UpdateDisplay();
    } else if (value == "e") {
        expression += "2.71828";
        UpdateDisplay();
    } else {
        expression += value;
        UpdateDisplay();
    }
}

// Window procedure
LRESULT CALLBACK WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
    case WM_COMMAND:
        if (HIWORD(wParam) == BN_CLICKED) {
            char text[20];
            GetWindowText((HWND)lParam, text, 20);
            OnButtonClick(text);
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    }
    return DefWindowProc(hwnd, msg, wParam, lParam);
}

// Helper to create buttons
void CreateCalcButton(HWND hwnd, const char* text, int x, int y, int id) {
    CreateWindow("BUTTON", text, WS_VISIBLE | WS_CHILD | BS_PUSHBUTTON,
        x, y, 50, 40, hwnd, (HMENU)id, NULL, NULL);
}

// WinMain: entry point
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    const char CLASS_NAME[] = "SciCalcWin";

    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;

    RegisterClass(&wc);

    HWND hwnd = CreateWindow(CLASS_NAME, "Scientific Calculator",
        WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 350, 500,
        NULL, NULL, hInstance, NULL);

    hDisplay = CreateWindow("EDIT", "", WS_VISIBLE | WS_CHILD | WS_BORDER | ES_RIGHT,
        20, 20, 280, 40, hwnd, NULL, NULL, NULL);

    const char* buttons[] = {
        "7", "8", "9", "÷", "sin",
        "4", "5", "6", "×", "cos",
        "1", "2", "3", "-", "tan",
        "0", ".", "=", "+", "sqrt",
        "π", "e", "log", "%", "C"
    };

    int id = 100;
    for (int i = 0; i < 5; ++i) {
        for (int j = 0; j < 5; ++j) {
            CreateCalcButton(hwnd, buttons[i * 5 + j], 20 + j * 55, 80 + i * 50, id++);
        }
    }

    ShowWindow(hwnd, nCmdShow);
    UpdateWindow(hwnd);

    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}

